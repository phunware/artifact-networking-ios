// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios15.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PhunwareNetworking
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
@_exported import PhunwareNetworking
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol NetworkClientProviding {
  var clientIdentifier: String { get }
  var networkInteractor: NetworkInteracting { get }
  var dataDecoder: DataDecoding { get }
  var failSafeCache: NetworkCaching { get }
  func perform<Response>(urlRequest: URLRequest, responseType: Response.Type, errorResponseHandler: HTTPErrorResponseHandling, completionQueue: DispatchQueue, completion: @escaping (NetworkResult<Response>) -> Void) where Response : Swift.Decodable
}
public protocol HTTPErrorResponseHandling {
  func handleError(urlResponse: HTTPURLResponse, data: Data?, dataDecoder: DataDecoding) -> Error?
}
public enum FailSafeCache {
  case `default`
  case custom(NetworkCaching)
}
public struct EmptyCodable : Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class NetworkClient : NetworkClientProviding {
  final public let clientIdentifier: String
  final public let networkInteractor: NetworkInteracting
  final public let dataDecoder: DataDecoding
  final public let failSafeCache: NetworkCaching
  public init(clientIdentifier: String, networkInteractor: NetworkInteracting = URLSession(configuration: .default), dataDecoder: DataDecoding = JSONDecoder(), failSafeCache: FailSafeCache = .default)
  public func perform<Response>(urlRequest: URLRequest, responseType: Response.Type, errorResponseHandler: HTTPErrorResponseHandling, completionQueue: DispatchQueue, completion: @escaping (NetworkResult<Response>) -> Void) where Response : Swift.Decodable
  @objc deinit
}
public struct NetworkResponse<ResponseData> {
  public let data: ResponseData
  public let urlResponse: URLResponse
  public var statusCode: Int? {
    get
  }
  public init(data: ResponseData, urlResponse: URLResponse)
}
public protocol NetworkInteracting {
  @discardableResult
  func fetch(with urlRequest: URLRequest, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) -> URLSessionDataTask?
}
extension URLSession : NetworkInteracting {
  @discardableResult
  public func fetch(with urlRequest: URLRequest, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) -> URLSessionDataTask?
}
public protocol NetworkCaching {
  func cachedResponse(for request: URLRequest) -> CachedURLResponse?
  func storeCachedResponse(_ cachedResponse: CachedURLResponse, for request: URLRequest)
  func removeCachedResponse(for request: URLRequest)
}
extension URLCache : NetworkCaching {
}
public protocol DataDecoding {
  func decode<T>(_ type: T.Type, from data: Data) throws -> T where T : Swift.Decodable
  func emptyPayloadString() -> String
}
extension JSONDecoder : DataDecoding {
  public func emptyPayloadString() -> String
}
extension PropertyListDecoder : DataDecoding {
  public func emptyPayloadString() -> String
}
public enum NetworkError : Error {
  case internalInconsistency(message: String)
  case failedHTTPStatus(code: Int)
}
public struct NetworkFailure<Response> : Error {
  public let underlyingError: Error
  public let urlResponse: URLResponse?
  public let cachedResponse: NetworkResponse<Response>?
  public init(underlyingError: Error, urlResponse: URLResponse?, cachedResponse: NetworkResponse<Response>?)
}
public enum NetworkResult<Response> {
  case success(response: NetworkResponse<Response>)
  case failure(error: NetworkFailure<Response>)
  public var statusCode: Int? {
    get
  }
}
